
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="../bootstrap/css/bootstrap-reboot.min.css">
    <link rel="stylesheet" href="../bootstrap/css/bootstrap-grid.min.css">
    <link rel="stylesheet" href="../bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="../css/estilo.css">
    <!-- jQuery -->
    <script type="text/javascript" src="../js/jquery-1.11.2.min.js"></script>
    <!-- Sparkline -->
    <script type="text/javascript" src="../js/jquery.sparkline.min.js"></script>
    <!-- jgPlot -->
    <link class="include" rel="stylesheet" type="text/css" href="dist/jquery.jqplot.min.css" />
    <script type="text/javascript" src="../js/jquery.jqplot.min.js"></script>
    <script type="text/javascript" src="../js/jqplot.canvasTextRenderer.min.js"></script>
    <script type="text/javascript" src="../js/jqplot.canvasAxisLabelRenderer.min.js"></script>
    <script type="text/javascript" src="../js/jqplot.dateAxisRenderer.min.js"></script>
    <!-- MQTT Websocket -->
    <script type="text/javascript" src="../js/mqttws31.js"></script>
    <script type="text/javascript">
        var host = 'iot.eclipse.org';
        var port = Number(1883);
        var topic = '29asoMqttPresencaInput';
        var useTLS = false;
        var cleansession = true;
        var mqtt;
        var reconnectTimeout = 2000;

        function MQTTconnect() {
	    if (typeof path == "undefined") {
		    path = '/mqtt';
	    }
		mqtt = new Paho.MQTT.Client("iot.eclipse.org", Number(80), "/ws", "mqtt_panel" + parseInt(Math.random() * 100, 10));

            var options = {
                timeout: 3,
                useSSL: useTLS,
                cleanSession: cleansession,
                onSuccess: onConnect,
                onFailure: function (message) {
                    $('#status').html("Connection failed: " + message.errorMessage + "Retrying...");
                    setTimeout(MQTTconnect, reconnectTimeout);
                }
            };

            mqtt.onConnectionLost = onConnectionLost;
            mqtt.onMessageArrived = onMessageArrived;
            console.log("Host: "+ host + ", Port: " + port + ", Path: " + path + " TLS: " + useTLS);
            mqtt.connect(options);
        };

        function onConnect() {
            $('#status').html('Connected to ' + host + ':' + port + path);
            mqtt.subscribe(topic, {qos: 0});
            $('#topic').html(topic);
        };

        function onConnectionLost(response) {
            setTimeout(MQTTconnect, reconnectTimeout);
            $('#status').html("Connection lost: " + responseObject.errorMessage + ". Reconnecting...");
        };

        function onMessageArrived(message) {
            var topic = message.destinationName;
            var payload = message.payloadString;
            //console.log("Topic: " + topic + ", Message payload: " + payload);
            $('#message').html(topic + ', ' + payload);
            $('#distanciaDisplay').text(payload);
            MoveCarro(payload);
            var message = topic.split('/');
            var area = message[1];
            var state = message[2];

            var timestamp = Math.round((new Date()).getTime() / 1000);
            switch (area) {
                case 'front':
                    $('#value1').html('(Switch value: ' + payload + ')');
                    if (payload == 'true') {
                        $('#label1').text('Closed');
                        $('#label1').removeClass('label-danger').addClass('label-success');
                    } else {
                        $('#label1').text('Open');
                        $('#label1').removeClass('label-success').addClass('label-danger');
                    }
                    break;
                case 'back':
                    $('#value2').html('(Switch value: ' + payload + ')');
                    if (payload == 'true') {
                        $('#label2').text('Closed');
                        $('#label2').removeClass('label-danger').addClass('label-success');
                    } else {
                        $('#label2').text('Open');
                        $('#label2').removeClass('label-success').addClass('label-danger');
                    }
                    break;
              case 'living':
                    $('#livingTempSensor').html('(Sensor value: ' + payload + ')');
                    $('#livingTempLabel').text(payload + '°C');
                    $('#livingTempLabel').removeClass('').addClass('label-default');

                    var entry = new Array();
                    entry.push(timestamp);
                    entry.push(parseInt(payload));
                    livingTemp.push(entry);
                    // Show only 20 values
                    if (livingTemp.length >= 20) {
                        livingTemp.shift()
                    }

                    var livingTempPlot = $.jqplot ('livingTempChart', [livingTemp], {
                        axesDefaults: {
                            labelRenderer: $.jqplot.CanvasAxisLabelRenderer,
                            tickOptions: {
                                showMark: false,
                                showGridline: false,
                                show: false,
                                showLabel: false,
                            }
                          },
                        grid: {
                            gridLineColor: '#FFFFFF',
                            borderWidth: 0,
                            shadow: false,
                        },
                        seriesDefaults: {
                            rendererOptions: {
                                smooth: true
                            },
                            showMarker: false,
                            lineWidth: 2,
                          },
                          axes: {
                            xaxis: {
                              renderer:$.jqplot.DateAxisRenderer,
                              tickOptions:{
                                formatString:'%T'
                              },
                              pad: 0
                            },
                            yaxis: {
                            }
                        }
                    });
                    break;
                case 'basement':
                    $('#basementTempSensor').html('(Sensor value: ' + payload + ')');
                    if (payload >= 25) {
                            $('#basementTempLabel').text(payload + '°C - too hot');
                            $('#basementTempLabel').removeClass('label-warning label-success label-info label-primary').addClass('label-danger');
                    } else if (payload >= 21) {
                            $('#basementTempLabel').text(payload + '°C - hot');
                            $('#basementTempLabel').removeClass('label-danger label-success label-info label-primary').addClass('label-warning');
                    } else if (payload >= 18) {
                            $('#basementTempLabel').text(payload + '°C - normal');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-info label-primary').addClass('label-success');
                    } else if (payload >= 15) {
                            $('#basementTempLabel').text(payload + '°C - low');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-success label-primary').addClass('label-info');
                    } else if (mpayload <= 12) {
                            $('#basementTempLabel').text(payload + '°C - too low');
                            $('#basementTempLabel').removeClass('label-danger label-warning label-success label-info').addClass('label-primary');
                    basementTemp.push(parseInt(payload));
                    if (basementTemp.length >= 20) {
                        basementTemp.shift()
                    }

                    $('.basementTempSparkline').sparkline(basementTemp, {
                        type: 'line',
                        width: '160',
                        height: '40'});
                    }
                    break;
                default: console.log('Error: Data do not match the MQTT topic.'); break;
            }
        };
        function MoveCarro(distanciaPayload) {
            var lightValue = $('#light').val();
            var distancia = distanciaPayload

            $('#distanciaDisplay').text(distancia);
            $('.espaco').css('width', distancia + 'px');
            $('.status-espaco').css('width', distancia + 'px');

            if (distancia <= 30 && lightValue == 0) {
                $('.garage').css('background-image', 'url("../img/fundo-on.png")');
                lightValue = 1;
            } else if (distancia > 30 && lightValue == 1) {
                $('.garage').css('background-image', 'url("../img/fundo-off.png")');
                lightValue = 0;
            }
            $('#light').val(lightValue);
        }
        function EscreveLampada(msg) {
            var obj = { value: msg }
            $.ajax({
                type: "POST",
                url: "/Estacionar/EscreveLampada",
                ascync: false,
                contentType: "application/json",
                data: JSON.stringify(obj),
                dataType: 'json',
                success: function (data) {
                    alert("Mensagem foi escrita");
                },
                error: function (xhr, error) {
                    alert("Erro.");
                    console.log(xhr);
                }
            });
        }
        $(document).ready(function() {
            MQTTconnect();
        });
    </script>
    <title>29ASO - IoT</title>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md">
                <h3>Sensor de Estacionamento</h3>
            </div>
        </div>
        <div class="row">
            <div class="jumbotron">
                <h4>Debug</h4>
                <p class="lead">Manual via form</p>
                <form>
                    <div class="form-group">
                        <label for="ultraSonico">ultraSonico</label>
                        <input type="number" name="ultraSonico" id="ultraSonico" value="31" step="1">
                    </div>
                    <div class="form-group">
                        <label for="lampada">lampada</label>
                        <input type="checkbox" name="lampada" id="lampada" value="0">
                    </div>
                </form>
            </div>
        </div>
        <div class="row garage-bg">
            &nbsp;
        </div>
        <div class="row garage">
            <div class="parede">
                <!--img src="img/brickwall2.jpg" alt="Parede"-->
                &nbsp;
            </div>
            <div class="espaco">
                &nbsp;
            </div>
            <div class="carango">
                <img src="../img/carango2.png" alt="Carango">
            </div>
        </div>
        <div class="row">
            <div class="status status-parede">&nbsp;</div>
            <div class="status status-espaco">
                <!--img src="img/svg/si-glyph-arrow-thin-left.svg"/-->
                <span id="distanciaDisplay">35.5</span>
                <br>
                <span class="medida">cm</span>
                <!--img src="img/svg/si-glyph-arrow-thin-right.svg"/-->
            </div>
            <div class="status status-carango">
                &nbsp;
                <input type="hidden" name="light" id="light" value="0">
            </div>
        </div>
        <div class="row" style="margin-top: 100px;">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6"><b>Latest MQTT message:  </b> <small id="message">no message recieved</small></div>
                        <div class="col-md-6"><b>Status: </b>  <small id='status'></small></div>
                        <input type="button" value="Escreve" onclick="EscreveLampada('D')" />
                    </div>
                </div>
            </div>
    </div>
    <script src="../js/jquery-3.3.1.min.js"></script>
    <script src="../js/controle.js"></script>
</body>
</html>
